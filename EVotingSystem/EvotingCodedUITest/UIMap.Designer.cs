// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace EvotingCodedUITest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Recording the logging in, and voting multiple elections of, a voter
        /// </summary>
        public void RecordedVotingTest()
        {
            #region Variable Declarations
            WinToolBar uIAddressQuickaccessToolBar = this.UIFileExplorerWindow.UIAddressQuickaccessWindow.UIAddressQuickaccessToolBar;
            WinComboBox uIAddressComboBox = this.UIFileExplorerWindow.UIItemWindow.UIAddressComboBox;
            WinEdit uIAddressEdit = this.UIFileExplorerWindow.UIItemWindow1.UIAddressEdit;
            WinEdit uINameEdit = this.UIFileExplorerWindow.UIItemWindow2.UIEVotingSystemListItem.UINameEdit;
            WinEdit uIUsernameBoxEdit = this.UIItemWindow.UIUsernameBoxWindow.UIUsernameBoxEdit;
            WinEdit uIPasswordBoxEdit = this.UIItemWindow.UIPasswordBoxWindow.UIPasswordBoxEdit;
            WinCheckBox uIIamnotarobotCheckBox = this.UIIamnotarobotWindow.UIIamnotarobotCheckBox;
            WinButton uILoginButton = this.UILoginWindow.UILoginButton;
            WinButton uIContinueButton = this.UIContinueWindow.UIContinueButton;
            WinCheckBox uISamCheckBox = this.UIVotePanelWindow.UISamWindow.UISamCheckBox;
            WinCheckBox uIMikeCheckBox = this.UIVotePanelWindow.UIMikeWindow.UIMikeCheckBox;
            WinButton uISubmitButton = this.UIVotePanelWindow.UISubmitWindow.UISubmitButton;
            WinCheckBox uIJoeCheckBox = this.UIVotePanelWindow.UIJoeWindow.UIJoeCheckBox;
            WinCheckBox uIMichaelCheckBox = this.UIVotePanelWindow.UIMichaelWindow.UIMichaelCheckBox;
            WinButton uIYesButton = this.UIConfirmPanelWindow.UIYesWindow.UIYesButton;
            WinButton uIEndSessionButton = this.UIThankYouPanelWindow.UIEndSessionWindow.UIEndSessionButton;
            WinButton uICloseButton = this.UIItemWindow.UILoginScreenWindow.UILoginScreenTitleBar.UICloseButton;
            #endregion

            // Click 'Address: Quick access' tool bar
            Mouse.Click(uIAddressQuickaccessToolBar, new Point(278, 6));

            // Select 'D:\CSSDAssignment2\EVotingSystem\EVotingSystem\bin\Debug' in 'Address' combo box
            uIAddressComboBox.EditableItem = this.RecordedVotingTestParams.UIAddressComboBoxEditableItem;

            // Type '{Enter}' in 'Address' text box
            Keyboard.SendKeys(uIAddressEdit, this.RecordedVotingTestParams.UIAddressEditSendKeys, ModifierKeys.None);

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(83, 3));

            // Type 'Robin' in 'usernameBox' text box
            uIUsernameBoxEdit.Text = this.RecordedVotingTestParams.UIUsernameBoxEditText;

            // Type '{Tab}' in 'usernameBox' text box
            Keyboard.SendKeys(uIUsernameBoxEdit, this.RecordedVotingTestParams.UIUsernameBoxEditSendKeys, ModifierKeys.None);

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.RecordedVotingTestParams.UIPasswordBoxEditSendKeys, true);

            // Select 'I am not a robot' check box
            uIIamnotarobotCheckBox.Checked = this.RecordedVotingTestParams.UIIamnotarobotCheckBoxChecked;

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(33, 6));

            // Click 'Continue' button
            Mouse.Click(uIContinueButton, new Point(18, 16));

            // Select 'Sam' check box
            uISamCheckBox.Checked = this.RecordedVotingTestParams.UISamCheckBoxChecked;

            // Select 'Mike' check box
            uIMikeCheckBox.Checked = this.RecordedVotingTestParams.UIMikeCheckBoxChecked;

            // Click 'Submit' button
            Mouse.Click(uISubmitButton, new Point(51, 29));

            // Select 'Joe' check box
            uIJoeCheckBox.Checked = this.RecordedVotingTestParams.UIJoeCheckBoxChecked;

            // Click 'Submit' button
            Mouse.Click(uISubmitButton, new Point(81, 29));

            // Select 'Michael' check box
            uIMichaelCheckBox.Checked = this.RecordedVotingTestParams.UIMichaelCheckBoxChecked;

            // Click 'Submit' button
            Mouse.Click(uISubmitButton, new Point(58, 25));

            // Click 'Yes' button
            Mouse.Click(uIYesButton, new Point(25, 16));

            // Click 'End Session' button
            Mouse.Click(uIEndSessionButton, new Point(60, 24));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(31, 19));
        }
        
        #region Properties
        public virtual RecordedVotingTestParams RecordedVotingTestParams
        {
            get
            {
                if ((this.mRecordedVotingTestParams == null))
                {
                    this.mRecordedVotingTestParams = new RecordedVotingTestParams();
                }
                return this.mRecordedVotingTestParams;
            }
        }
        
        public UIFileExplorerWindow UIFileExplorerWindow
        {
            get
            {
                if ((this.mUIFileExplorerWindow == null))
                {
                    this.mUIFileExplorerWindow = new UIFileExplorerWindow();
                }
                return this.mUIFileExplorerWindow;
            }
        }
        
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIIamnotarobotWindow UIIamnotarobotWindow
        {
            get
            {
                if ((this.mUIIamnotarobotWindow == null))
                {
                    this.mUIIamnotarobotWindow = new UIIamnotarobotWindow();
                }
                return this.mUIIamnotarobotWindow;
            }
        }
        
        public UILoginWindow UILoginWindow
        {
            get
            {
                if ((this.mUILoginWindow == null))
                {
                    this.mUILoginWindow = new UILoginWindow();
                }
                return this.mUILoginWindow;
            }
        }
        
        public UIContinueWindow UIContinueWindow
        {
            get
            {
                if ((this.mUIContinueWindow == null))
                {
                    this.mUIContinueWindow = new UIContinueWindow();
                }
                return this.mUIContinueWindow;
            }
        }
        
        public UIVotePanelWindow UIVotePanelWindow
        {
            get
            {
                if ((this.mUIVotePanelWindow == null))
                {
                    this.mUIVotePanelWindow = new UIVotePanelWindow();
                }
                return this.mUIVotePanelWindow;
            }
        }
        
        public UIConfirmPanelWindow UIConfirmPanelWindow
        {
            get
            {
                if ((this.mUIConfirmPanelWindow == null))
                {
                    this.mUIConfirmPanelWindow = new UIConfirmPanelWindow();
                }
                return this.mUIConfirmPanelWindow;
            }
        }
        
        public UIThankYouPanelWindow UIThankYouPanelWindow
        {
            get
            {
                if ((this.mUIThankYouPanelWindow == null))
                {
                    this.mUIThankYouPanelWindow = new UIThankYouPanelWindow();
                }
                return this.mUIThankYouPanelWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedVotingTestParams mRecordedVotingTestParams;
        
        private UIFileExplorerWindow mUIFileExplorerWindow;
        
        private UIItemWindow3 mUIItemWindow;
        
        private UIIamnotarobotWindow mUIIamnotarobotWindow;
        
        private UILoginWindow mUILoginWindow;
        
        private UIContinueWindow mUIContinueWindow;
        
        private UIVotePanelWindow mUIVotePanelWindow;
        
        private UIConfirmPanelWindow mUIConfirmPanelWindow;
        
        private UIThankYouPanelWindow mUIThankYouPanelWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedVotingTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedVotingTestParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'D:\CSSDAssignment2\EVotingSystem\EVotingSystem\bin\Debug' in 'Address' combo box
        /// </summary>
        public string UIAddressComboBoxEditableItem = "D:\\CSSDAssignment2\\EVotingSystem\\EVotingSystem\\bin\\Debug";
        
        /// <summary>
        /// Type '{Enter}' in 'Address' text box
        /// </summary>
        public string UIAddressEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'Robin' in 'usernameBox' text box
        /// </summary>
        public string UIUsernameBoxEditText = "Robin";
        
        /// <summary>
        /// Type '{Tab}' in 'usernameBox' text box
        /// </summary>
        public string UIUsernameBoxEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "QWwOodIXpSM441BCNCWNvH9k+8fhegdI";
        
        /// <summary>
        /// Select 'I am not a robot' check box
        /// </summary>
        public bool UIIamnotarobotCheckBoxChecked = true;
        
        /// <summary>
        /// Select 'Sam' check box
        /// </summary>
        public bool UISamCheckBoxChecked = true;
        
        /// <summary>
        /// Select 'Mike' check box
        /// </summary>
        public bool UIMikeCheckBoxChecked = true;
        
        /// <summary>
        /// Select 'Joe' check box
        /// </summary>
        public bool UIJoeCheckBoxChecked = true;
        
        /// <summary>
        /// Select 'Michael' check box
        /// </summary>
        public bool UIMichaelCheckBoxChecked = true;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFileExplorerWindow : WinWindow
    {
        
        public UIFileExplorerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "File Explorer";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("File Explorer");
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIAddressQuickaccessWindow UIAddressQuickaccessWindow
        {
            get
            {
                if ((this.mUIAddressQuickaccessWindow == null))
                {
                    this.mUIAddressQuickaccessWindow = new UIAddressQuickaccessWindow(this);
                }
                return this.mUIAddressQuickaccessWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        #endregion
        
        #region Fields
        private UIAddressQuickaccessWindow mUIAddressQuickaccessWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIItemWindow2 mUIItemWindow2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAddressQuickaccessWindow : WinWindow
    {
        
        public UIAddressQuickaccessWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("File Explorer");
            #endregion
        }
        
        #region Properties
        public WinToolBar UIAddressQuickaccessToolBar
        {
            get
            {
                if ((this.mUIAddressQuickaccessToolBar == null))
                {
                    this.mUIAddressQuickaccessToolBar = new WinToolBar(this);
                    #region Search Criteria
                    this.mUIAddressQuickaccessToolBar.SearchProperties[WinToolBar.PropertyNames.Name] = "Address: Quick access";
                    this.mUIAddressQuickaccessToolBar.WindowTitles.Add("File Explorer");
                    #endregion
                }
                return this.mUIAddressQuickaccessToolBar;
            }
        }
        #endregion
        
        #region Fields
        private WinToolBar mUIAddressQuickaccessToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "41477";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("File Explorer");
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIAddressComboBox
        {
            get
            {
                if ((this.mUIAddressComboBox == null))
                {
                    this.mUIAddressComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIAddressComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Address";
                    this.mUIAddressComboBox.WindowTitles.Add("File Explorer");
                    this.mUIAddressComboBox.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUIAddressComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIAddressComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "41477";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("File Explorer");
            #endregion
        }
        
        #region Properties
        public WinEdit UIAddressEdit
        {
            get
            {
                if ((this.mUIAddressEdit == null))
                {
                    this.mUIAddressEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIAddressEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Address";
                    this.mUIAddressEdit.WindowTitles.Add("File Explorer");
                    #endregion
                }
                return this.mUIAddressEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIAddressEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIEVotingSystemListItem UIEVotingSystemListItem
        {
            get
            {
                if ((this.mUIEVotingSystemListItem == null))
                {
                    this.mUIEVotingSystemListItem = new UIEVotingSystemListItem(this);
                }
                return this.mUIEVotingSystemListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIEVotingSystemListItem mUIEVotingSystemListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEVotingSystemListItem : WinListItem
    {
        
        public UIEVotingSystemListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "EVotingSystem";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIUsernameBoxWindow UIUsernameBoxWindow
        {
            get
            {
                if ((this.mUIUsernameBoxWindow == null))
                {
                    this.mUIUsernameBoxWindow = new UIUsernameBoxWindow(this);
                }
                return this.mUIUsernameBoxWindow;
            }
        }
        
        public UIPasswordBoxWindow UIPasswordBoxWindow
        {
            get
            {
                if ((this.mUIPasswordBoxWindow == null))
                {
                    this.mUIPasswordBoxWindow = new UIPasswordBoxWindow(this);
                }
                return this.mUIPasswordBoxWindow;
            }
        }
        
        public UILoginScreenWindow UILoginScreenWindow
        {
            get
            {
                if ((this.mUILoginScreenWindow == null))
                {
                    this.mUILoginScreenWindow = new UILoginScreenWindow(this);
                }
                return this.mUILoginScreenWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIUsernameBoxWindow mUIUsernameBoxWindow;
        
        private UIPasswordBoxWindow mUIPasswordBoxWindow;
        
        private UILoginScreenWindow mUILoginScreenWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUsernameBoxWindow : WinWindow
    {
        
        public UIUsernameBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "usernameBox";
            #endregion
        }
        
        #region Properties
        public WinEdit UIUsernameBoxEdit
        {
            get
            {
                if ((this.mUIUsernameBoxEdit == null))
                {
                    this.mUIUsernameBoxEdit = new WinEdit(this);
                }
                return this.mUIUsernameBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIUsernameBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPasswordBoxWindow : WinWindow
    {
        
        public UIPasswordBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "passwordBox";
            #endregion
        }
        
        #region Properties
        public WinEdit UIPasswordBoxEdit
        {
            get
            {
                if ((this.mUIPasswordBoxEdit == null))
                {
                    this.mUIPasswordBoxEdit = new WinEdit(this);
                }
                return this.mUIPasswordBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIPasswordBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILoginScreenWindow : WinWindow
    {
        
        public UILoginScreenWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UILoginScreenTitleBar UILoginScreenTitleBar
        {
            get
            {
                if ((this.mUILoginScreenTitleBar == null))
                {
                    this.mUILoginScreenTitleBar = new UILoginScreenTitleBar(this);
                }
                return this.mUILoginScreenTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UILoginScreenTitleBar mUILoginScreenTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILoginScreenTitleBar : WinTitleBar
    {
        
        public UILoginScreenTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIIamnotarobotWindow : WinWindow
    {
        
        public UIIamnotarobotWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "I am not a robot";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("I am not a robot");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIIamnotarobotCheckBox
        {
            get
            {
                if ((this.mUIIamnotarobotCheckBox == null))
                {
                    this.mUIIamnotarobotCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIIamnotarobotCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "I am not a robot";
                    this.mUIIamnotarobotCheckBox.WindowTitles.Add("I am not a robot");
                    #endregion
                }
                return this.mUIIamnotarobotCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIIamnotarobotCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILoginWindow : WinWindow
    {
        
        public UILoginWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Login";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Login");
            #endregion
        }
        
        #region Properties
        public WinButton UILoginButton
        {
            get
            {
                if ((this.mUILoginButton == null))
                {
                    this.mUILoginButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILoginButton.SearchProperties[WinButton.PropertyNames.Name] = "Login";
                    this.mUILoginButton.WindowTitles.Add("Login");
                    #endregion
                }
                return this.mUILoginButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILoginButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContinueWindow : WinWindow
    {
        
        public UIContinueWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Continue";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Continue");
            #endregion
        }
        
        #region Properties
        public WinButton UIContinueButton
        {
            get
            {
                if ((this.mUIContinueButton == null))
                {
                    this.mUIContinueButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContinueButton.SearchProperties[WinButton.PropertyNames.Name] = "Continue";
                    this.mUIContinueButton.WindowTitles.Add("Continue");
                    #endregion
                }
                return this.mUIContinueButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIContinueButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIVotePanelWindow : WinWindow
    {
        
        public UIVotePanelWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "To Vote:Select the check box displaying your desired candidate,Then select the \'S" +
                "ubmit\' button.";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UISamWindow UISamWindow
        {
            get
            {
                if ((this.mUISamWindow == null))
                {
                    this.mUISamWindow = new UISamWindow(this);
                }
                return this.mUISamWindow;
            }
        }
        
        public UISubmitWindow UISubmitWindow
        {
            get
            {
                if ((this.mUISubmitWindow == null))
                {
                    this.mUISubmitWindow = new UISubmitWindow(this);
                }
                return this.mUISubmitWindow;
            }
        }
        
        public UIMikeWindow UIMikeWindow
        {
            get
            {
                if ((this.mUIMikeWindow == null))
                {
                    this.mUIMikeWindow = new UIMikeWindow(this);
                }
                return this.mUIMikeWindow;
            }
        }
        
        public UIRobinWindow UIRobinWindow
        {
            get
            {
                if ((this.mUIRobinWindow == null))
                {
                    this.mUIRobinWindow = new UIRobinWindow(this);
                }
                return this.mUIRobinWindow;
            }
        }
        
        public UIMikeWindow1 UIMikeWindow1
        {
            get
            {
                if ((this.mUIMikeWindow1 == null))
                {
                    this.mUIMikeWindow1 = new UIMikeWindow1(this);
                }
                return this.mUIMikeWindow1;
            }
        }
        
        public UIJoeWindow UIJoeWindow
        {
            get
            {
                if ((this.mUIJoeWindow == null))
                {
                    this.mUIJoeWindow = new UIJoeWindow(this);
                }
                return this.mUIJoeWindow;
            }
        }
        
        public UIMichaelWindow UIMichaelWindow
        {
            get
            {
                if ((this.mUIMichaelWindow == null))
                {
                    this.mUIMichaelWindow = new UIMichaelWindow(this);
                }
                return this.mUIMichaelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UISamWindow mUISamWindow;
        
        private UISubmitWindow mUISubmitWindow;
        
        private UIMikeWindow mUIMikeWindow;
        
        private UIRobinWindow mUIRobinWindow;
        
        private UIMikeWindow1 mUIMikeWindow1;
        
        private UIJoeWindow mUIJoeWindow;
        
        private UIMichaelWindow mUIMichaelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISamWindow : WinWindow
    {
        
        public UISamWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "SamChk";
            #endregion
        }
        
        #region Properties
        public WinCheckBox UISamCheckBox
        {
            get
            {
                if ((this.mUISamCheckBox == null))
                {
                    this.mUISamCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUISamCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Sam";
                    #endregion
                }
                return this.mUISamCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUISamCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISubmitWindow : WinWindow
    {
        
        public UISubmitWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "submitBtn";
            #endregion
        }
        
        #region Properties
        public WinButton UISubmitButton
        {
            get
            {
                if ((this.mUISubmitButton == null))
                {
                    this.mUISubmitButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISubmitButton.SearchProperties[WinButton.PropertyNames.Name] = "Submit";
                    #endregion
                }
                return this.mUISubmitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISubmitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMikeWindow : WinWindow
    {
        
        public UIMikeWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "MikeChk";
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIMikeCheckBox
        {
            get
            {
                if ((this.mUIMikeCheckBox == null))
                {
                    this.mUIMikeCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIMikeCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Mike";
                    #endregion
                }
                return this.mUIMikeCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIMikeCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRobinWindow : WinWindow
    {
        
        public UIRobinWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "RobinChk";
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIRobinCheckBox
        {
            get
            {
                if ((this.mUIRobinCheckBox == null))
                {
                    this.mUIRobinCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIRobinCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Robin";
                    #endregion
                }
                return this.mUIRobinCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIRobinCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMikeWindow1 : WinWindow
    {
        
        public UIMikeWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "MikeChk";
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIMikeCheckBox
        {
            get
            {
                if ((this.mUIMikeCheckBox == null))
                {
                    this.mUIMikeCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIMikeCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Mike";
                    #endregion
                }
                return this.mUIMikeCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIMikeCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIJoeWindow : WinWindow
    {
        
        public UIJoeWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "JoeChk";
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIJoeCheckBox
        {
            get
            {
                if ((this.mUIJoeCheckBox == null))
                {
                    this.mUIJoeCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIJoeCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Joe";
                    #endregion
                }
                return this.mUIJoeCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIJoeCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMichaelWindow : WinWindow
    {
        
        public UIMichaelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "MichaelChk";
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIMichaelCheckBox
        {
            get
            {
                if ((this.mUIMichaelCheckBox == null))
                {
                    this.mUIMichaelCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIMichaelCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Michael";
                    #endregion
                }
                return this.mUIMichaelCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIMichaelCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIConfirmPanelWindow : WinWindow
    {
        
        public UIConfirmPanelWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Select at least ONE candidate";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINOWindow mUINOWindow;
        
        private UIYesWindow mUIYesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "denyBtn";
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "confirmBtn";
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIThankYouPanelWindow : WinWindow
    {
        
        public UIThankYouPanelWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Are you sure you want to vote for:";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIEndSessionWindow UIEndSessionWindow
        {
            get
            {
                if ((this.mUIEndSessionWindow == null))
                {
                    this.mUIEndSessionWindow = new UIEndSessionWindow(this);
                }
                return this.mUIEndSessionWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIEndSessionWindow mUIEndSessionWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEndSessionWindow : WinWindow
    {
        
        public UIEndSessionWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "signOutLbl";
            #endregion
        }
        
        #region Properties
        public WinButton UIEndSessionButton
        {
            get
            {
                if ((this.mUIEndSessionButton == null))
                {
                    this.mUIEndSessionButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIEndSessionButton.SearchProperties[WinButton.PropertyNames.Name] = "End Session";
                    #endregion
                }
                return this.mUIEndSessionButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIEndSessionButton;
        #endregion
    }
}
