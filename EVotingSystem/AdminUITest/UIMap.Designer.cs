// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace AdminUITest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// attemptLogin - Use 'attemptLoginParams' to pass parameters into this method.
        /// </summary>
        public void attemptLogin()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIReleaseWindow.UIItemWindow.UIEVotingSystemexeListItem.UINameEdit;
            WinEdit uIUsernameBoxEdit = this.UIItemWindow.UIUsernameBoxWindow.UIUsernameBoxEdit;
            WinEdit uIPasswordBoxEdit = this.UIItemWindow.UIPasswordBoxWindow.UIPasswordBoxEdit;
            WinCheckBox uIIamnotarobotCheckBox = this.UIIamnotarobotWindow.UIIamnotarobotCheckBox;
            WinButton uILoginButton = this.UILoginWindow.UILoginButton;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(67, 8));

            // Type 'Sam' in 'usernameBox' text box
            uIUsernameBoxEdit.Text = this.attemptLoginParams.UIUsernameBoxEditText;

            // Type '{Tab}' in 'usernameBox' text box
            Keyboard.SendKeys(uIUsernameBoxEdit, this.attemptLoginParams.UIUsernameBoxEditSendKeys, ModifierKeys.None);

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.attemptLoginParams.UIPasswordBoxEditSendKeys, true);

            // Select 'I am not a robot' check box
            uIIamnotarobotCheckBox.Checked = this.attemptLoginParams.UIIamnotarobotCheckBoxChecked;

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(42, 9));

            // Type 'Alt + r' in 'Login' button
            Keyboard.SendKeys(uILoginButton, this.attemptLoginParams.UILoginButtonSendKeys, ModifierKeys.Alt);
        }
        
        /// <summary>
        /// close
        /// </summary>
        public void close()
        {
            #region Variable Declarations
            WinTitleBar uIUserGUITitleBar = this.UIItemWindow.UIUserGUIWindow.UIUserGUITitleBar;
            WinTitleBar uILoginScreenTitleBar = this.UIItemWindow.UILoginScreenWindow.UILoginScreenTitleBar;
            #endregion

            // Click 'UserGUI' title bar
            Mouse.Click(uIUserGUITitleBar, new Point(570, 25));

            // Click 'LoginScreen' title bar
            Mouse.Click(uILoginScreenTitleBar, new Point(562, 17));
        }
        
        /// <summary>
        /// loginAsSuper - Use 'loginAsSuperParams' to pass parameters into this method.
        /// </summary>
        public void loginAsSuper()
        {
            #region Variable Declarations
            WinWindow uIUsernameBoxWindow = this.UIItemWindow.UILoginPanelWindow.UIUsernameBoxWindow;
            WinEdit uIUsernameBoxEdit = this.UIItemWindow.UIUsernameBoxWindow.UIUsernameBoxEdit;
            WinEdit uIPasswordBoxEdit = this.UIItemWindow.UIPasswordBoxWindow.UIPasswordBoxEdit;
            WinButton uILoginButton = this.UILoginWindow.UILoginButton;
            #endregion

            // Click 'usernameBox' window
            Mouse.Click(uIUsernameBoxWindow, new Point(74, 20));

            // Type 'Super' in 'usernameBox' text box
            uIUsernameBoxEdit.Text = this.loginAsSuperParams.UIUsernameBoxEditText;

            // Type '{Tab}' in 'usernameBox' text box
            Keyboard.SendKeys(uIUsernameBoxEdit, this.loginAsSuperParams.UIUsernameBoxEditSendKeys, ModifierKeys.None);

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.loginAsSuperParams.UIPasswordBoxEditSendKeys, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(42, 11));
        }
        
        /// <summary>
        /// resetAuth
        /// </summary>
        public void resetAuth()
        {
            #region Variable Declarations
            WinButton uIOnsiteButton = this.UIAdminGUIWindow.UIOnsiteWindow.UIOnsiteButton;
            WinCell uISamCell = this.UIAdminGUIWindow.UIVoterViewWindow.UIDataGridViewTable.UIRow1Row.UISamCell;
            WinButton uIResetAuthattemptsButton = this.UIAdminGUIWindow.UIResetAuthattemptsWindow.UIResetAuthattemptsButton;
            #endregion

            // Click 'Onsite' button
            Mouse.Click(uIOnsiteButton, new Point(51, 44));

            // Click 'Sam' cell
            Mouse.Click(uISamCell, new Point(87, 10));

            // Click 'Reset Auth attempts' button
            Mouse.Click(uIResetAuthattemptsButton, new Point(57, 8));
        }
        
        /// <summary>
        /// successLogin - Use 'successLoginParams' to pass parameters into this method.
        /// </summary>
        public void successLogin()
        {
            #region Variable Declarations
            WinButton uIBackButton = this.UIAdminGUIWindow.UIBackWindow.UIBackButton;
            WinButton uILogOutButton = this.UIAdminGUIWindow.UILogOutWindow.UILogOutButton;
            WinEdit uIUsernameBoxEdit = this.UIItemWindow.UIUsernameBoxWindow.UIUsernameBoxEdit;
            WinEdit uIPasswordBoxEdit = this.UIItemWindow.UIPasswordBoxWindow.UIPasswordBoxEdit;
            WinButton uILoginButton = this.UILoginWindow.UILoginButton;
            #endregion

            // Click 'Back' button
            Mouse.Click(uIBackButton, new Point(33, 5));

            // Click 'Log Out' button
            Mouse.Click(uILogOutButton, new Point(40, 24));

            // Type 'Sam' in 'usernameBox' text box
            uIUsernameBoxEdit.Text = this.successLoginParams.UIUsernameBoxEditText;

            // Type '{Tab}' in 'usernameBox' text box
            Keyboard.SendKeys(uIUsernameBoxEdit, this.successLoginParams.UIUsernameBoxEditSendKeys, ModifierKeys.None);

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.successLoginParams.UIPasswordBoxEditSendKeys, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(39, 23));
        }
        
        /// <summary>
        /// vote - Use 'voteParams' to pass parameters into this method.
        /// </summary>
        public void vote()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIReleaseWindow.UIItemWindow.UIEVotingSystemexeListItem.UINameEdit;
            WinEdit uIUsernameBoxEdit = this.UIItemWindow.UIUsernameBoxWindow.UIUsernameBoxEdit;
            WinEdit uIPasswordBoxEdit = this.UIItemWindow.UIPasswordBoxWindow.UIPasswordBoxEdit;
            WinCheckBox uIIamnotarobotCheckBox = this.UIIamnotarobotWindow.UIIamnotarobotCheckBox;
            WinButton uILoginButton = this.UILoginWindow.UILoginButton;
            WinButton uIContinueButton = this.UIContinueWindow.UIContinueButton;
            WinRadioButton uISamRadioButton = this.UIVotePanelWindow.UISamWindow.UISamRadioButton;
            WinButton uISubmitButton = this.UIVotePanelWindow.UISubmitWindow.UISubmitButton;
            WinButton uIYesButton = this.UIConfirmPanelWindow.UIYesWindow.UIYesButton;
            WinButton uIEndSessionButton = this.UIThankYouPanelWindow.UIEndSessionWindow.UIEndSessionButton;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(1, 13));

            // Type 'Robin' in 'usernameBox' text box
            uIUsernameBoxEdit.Text = this.voteParams.UIUsernameBoxEditText;

            // Type '{Tab}' in 'usernameBox' text box
            Keyboard.SendKeys(uIUsernameBoxEdit, this.voteParams.UIUsernameBoxEditSendKeys, ModifierKeys.None);

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.voteParams.UIPasswordBoxEditSendKeys, true);

            // Select 'I am not a robot' check box
            uIIamnotarobotCheckBox.Checked = this.voteParams.UIIamnotarobotCheckBoxChecked;

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(28, 16));

            // Click 'Continue' button
            Mouse.Click(uIContinueButton, new Point(37, 9));

            // Select 'Sam' radio button
            uISamRadioButton.Selected = this.voteParams.UISamRadioButtonSelected;

            // Click 'Submit' button
            Mouse.Click(uISubmitButton, new Point(58, 36));

            // Click 'Yes' button
            Mouse.Click(uIYesButton, new Point(48, 31));

            // Click 'End Session' button
            Mouse.Click(uIEndSessionButton, new Point(83, 37));
        }
        
        /// <summary>
        /// seeIneligible - Use 'seeIneligibleParams' to pass parameters into this method.
        /// </summary>
        public void seeIneligible()
        {
            #region Variable Declarations
            WinWindow uIUsernameBoxWindow = this.UIItemWindow.UILoginPanelWindow.UIUsernameBoxWindow;
            WinEdit uIUsernameBoxEdit = this.UIItemWindow.UIUsernameBoxWindow.UIUsernameBoxEdit;
            WinEdit uIPasswordBoxEdit = this.UIItemWindow.UIPasswordBoxWindow.UIPasswordBoxEdit;
            WinClient uILoginPanelClient = this.UIItemWindow.UILoginPanelWindow.UILoginPanelClient;
            WinButton uILoginButton = this.UILoginWindow.UILoginButton;
            WinButton uIOnsiteButton = this.UIAdminGUIWindow.UIOnsiteWindow.UIOnsiteButton;
            WinCell uIFalseCell = this.UIAdminGUIWindow.UIVoterViewWindow.UIDataGridViewTable.UIRow0Row.UIFalseCell;
            WinCell uITrueCell = this.UIAdminGUIWindow.UIVoterViewWindow.UIDataGridViewTable.UIRow1Row.UITrueCell;
            WinButton uIBackButton = this.UIAdminGUIWindow.UIBackWindow.UIBackButton;
            WinButton uILogOutButton = this.UIAdminGUIWindow.UILogOutWindow.UILogOutButton;
            WinTitleBar uIUserGUITitleBar = this.UIItemWindow.UIUserGUIWindow.UIUserGUITitleBar;
            #endregion

            // Click 'usernameBox' window
            Mouse.Click(uIUsernameBoxWindow, new Point(38, 1));

            // Double-Click 'usernameBox' window
            Mouse.DoubleClick(uIUsernameBoxWindow, new Point(55, 20));

            // Type 'Robin' in 'usernameBox' text box
            uIUsernameBoxEdit.Text = this.seeIneligibleParams.UIUsernameBoxEditText;

            // Type '{Tab}' in 'usernameBox' text box
            Keyboard.SendKeys(uIUsernameBoxEdit, this.seeIneligibleParams.UIUsernameBoxEditSendKeys, ModifierKeys.None);

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.seeIneligibleParams.UIPasswordBoxEditSendKeys, true);

            // Move 'usernameBox' text box to 'loginPanel' client
            uILoginPanelClient.EnsureClickable(new Point(178, 67));
            Mouse.StartDragging(uIUsernameBoxEdit, new Point(51, 12));
            Mouse.StopDragging(uILoginPanelClient, new Point(178, 67));

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(32, 24));

            // Type 'Super' in 'usernameBox' text box
            uIUsernameBoxEdit.Text = this.seeIneligibleParams.UIUsernameBoxEditText1;

            // Type '{Tab}' in 'usernameBox' text box
            Keyboard.SendKeys(uIUsernameBoxEdit, this.seeIneligibleParams.UIUsernameBoxEditSendKeys1, ModifierKeys.None);

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.seeIneligibleParams.UIPasswordBoxEditSendKeys1, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(25, 20));

            // Click 'Onsite' button
            Mouse.Click(uIOnsiteButton, new Point(115, 39));

            // Click 'False' cell
            Mouse.Click(uIFalseCell, new Point(39, 21));

            // Click 'True' cell
            Mouse.Click(uITrueCell, new Point(27, 12));

            // Click 'Back' button
            Mouse.Click(uIBackButton, new Point(49, 21));

            // Click 'Log Out' button
            Mouse.Click(uILogOutButton, new Point(63, 17));

            // Click 'UserGUI' title bar
            Mouse.Click(uIUserGUITitleBar, new Point(554, 11));
        }
        
        /// <summary>
        /// setEligAndTryLogIn - Use 'setEligAndTryLogInParams' to pass parameters into this method.
        /// </summary>
        public void setEligAndTryLogIn()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIReleaseWindow.UIItemWindow.UIEVotingSystemexeListItem.UINameEdit;
            WinEdit uIUsernameBoxEdit = this.UIItemWindow.UIUsernameBoxWindow.UIUsernameBoxEdit;
            WinEdit uIPasswordBoxEdit = this.UIItemWindow.UIPasswordBoxWindow.UIPasswordBoxEdit;
            WinCheckBox uIIamnotarobotCheckBox = this.UIIamnotarobotWindow.UIIamnotarobotCheckBox;
            WinButton uILoginButton = this.UILoginWindow.UILoginButton;
            WinButton uIOnsiteButton = this.UIAdminGUIWindow.UIOnsiteWindow.UIOnsiteButton;
            WinButton uISetIneligibleButton = this.UIAdminGUIWindow.UISetIneligibleWindow.UISetIneligibleButton;
            WinButton uIBackButton = this.UIAdminGUIWindow.UIBackWindow.UIBackButton;
            WinButton uILogOutButton = this.UIAdminGUIWindow.UILogOutWindow.UILogOutButton;
            WinClient uILoginPanelClient = this.UIItemWindow.UILoginPanelWindow.UILoginPanelClient;
            WinTitleBar uIUserGUITitleBar = this.UIItemWindow.UIUserGUIWindow.UIUserGUITitleBar;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(100, 12));

            // Type 'Super' in 'usernameBox' text box
            uIUsernameBoxEdit.Text = this.setEligAndTryLogInParams.UIUsernameBoxEditText;

            // Type '{Tab}' in 'usernameBox' text box
            Keyboard.SendKeys(uIUsernameBoxEdit, this.setEligAndTryLogInParams.UIUsernameBoxEditSendKeys, ModifierKeys.None);

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.setEligAndTryLogInParams.UIPasswordBoxEditSendKeys, true);

            // Select 'I am not a robot' check box
            uIIamnotarobotCheckBox.Checked = this.setEligAndTryLogInParams.UIIamnotarobotCheckBoxChecked;

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(40, 15));

            // Click 'Onsite' button
            Mouse.Click(uIOnsiteButton, new Point(64, 49));

            // Click 'Set Ineligible' button
            Mouse.Click(uISetIneligibleButton, new Point(51, 14));

            // Click 'Back' button
            Mouse.Click(uIBackButton, new Point(25, 18));

            // Click 'Log Out' button
            Mouse.Click(uILogOutButton, new Point(26, 18));

            // Click 'loginPanel' client
            Mouse.Click(uILoginPanelClient, new Point(261, 89));

            // Type 'Robin' in 'usernameBox' text box
            uIUsernameBoxEdit.Text = this.setEligAndTryLogInParams.UIUsernameBoxEditText1;

            // Type '{Tab}' in 'usernameBox' text box
            Keyboard.SendKeys(uIUsernameBoxEdit, this.setEligAndTryLogInParams.UIUsernameBoxEditSendKeys1, ModifierKeys.None);

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.setEligAndTryLogInParams.UIPasswordBoxEditSendKeys1, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(29, 10));

            // Click 'UserGUI' title bar
            Mouse.Click(uIUserGUITitleBar, new Point(567, 21));
        }
        
        /// <summary>
        /// voteAsSam - Use 'voteAsSamParams' to pass parameters into this method.
        /// </summary>
        public void voteAsSam()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIReleaseWindow.UIItemWindow.UIEVotingSystemexeListItem.UINameEdit;
            WinEdit uIUsernameBoxEdit = this.UIItemWindow.UIUsernameBoxWindow.UIUsernameBoxEdit;
            WinEdit uIPasswordBoxEdit = this.UIItemWindow.UIPasswordBoxWindow.UIPasswordBoxEdit;
            WinCheckBox uIIamnotarobotCheckBox = this.UIIamnotarobotWindow.UIIamnotarobotCheckBox;
            WinButton uILoginButton = this.UILoginWindow.UILoginButton;
            WinButton uIContinueButton = this.UIContinueWindow.UIContinueButton;
            WinRadioButton uISamRadioButton = this.UIVotePanelWindow.UISamWindow.UISamRadioButton;
            WinButton uISubmitButton = this.UIVotePanelWindow.UISubmitWindow.UISubmitButton;
            WinButton uIYesButton = this.UIConfirmPanelWindow.UIYesWindow.UIYesButton;
            WinButton uIEndSessionButton = this.UIThankYouPanelWindow.UIEndSessionWindow.UIEndSessionButton;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(49, 8));

            // Type 'Robin' in 'usernameBox' text box
            uIUsernameBoxEdit.Text = this.voteAsSamParams.UIUsernameBoxEditText;

            // Type '{Tab}' in 'usernameBox' text box
            Keyboard.SendKeys(uIUsernameBoxEdit, this.voteAsSamParams.UIUsernameBoxEditSendKeys, ModifierKeys.None);

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.voteAsSamParams.UIPasswordBoxEditSendKeys, true);

            // Select 'I am not a robot' check box
            uIIamnotarobotCheckBox.Checked = this.voteAsSamParams.UIIamnotarobotCheckBoxChecked;

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(31, 11));

            // Click 'Continue' button
            Mouse.Click(uIContinueButton, new Point(13, 18));

            // Select 'Sam' radio button
            uISamRadioButton.Selected = this.voteAsSamParams.UISamRadioButtonSelected;

            // Click 'Submit' button
            Mouse.Click(uISubmitButton, new Point(50, 44));

            // Click 'Yes' button
            Mouse.Click(uIYesButton, new Point(41, 15));

            // Click 'End Session' button
            Mouse.Click(uIEndSessionButton, new Point(94, 47));
        }
        
        /// <summary>
        /// seeRobinVoted - Use 'seeRobinVotedParams' to pass parameters into this method.
        /// </summary>
        public void seeRobinVoted()
        {
            #region Variable Declarations
            WinEdit uIUsernameBoxEdit = this.UIItemWindow.UIUsernameBoxWindow.UIUsernameBoxEdit;
            WinEdit uIPasswordBoxEdit = this.UIItemWindow.UIPasswordBoxWindow.UIPasswordBoxEdit;
            WinButton uILoginButton = this.UILoginWindow.UILoginButton;
            WinButton uIOnsiteButton = this.UIAdminGUIWindow.UIOnsiteWindow.UIOnsiteButton;
            WinButton uIBackButton = this.UIAdminGUIWindow.UIBackWindow.UIBackButton;
            WinButton uILogOutButton = this.UIAdminGUIWindow.UILogOutWindow.UILogOutButton;
            WinTitleBar uIUserGUITitleBar = this.UIItemWindow.UIUserGUIWindow.UIUserGUITitleBar;
            #endregion

            // Type 'Super' in 'usernameBox' text box
            uIUsernameBoxEdit.Text = this.seeRobinVotedParams.UIUsernameBoxEditText;

            // Type '{Tab}' in 'usernameBox' text box
            Keyboard.SendKeys(uIUsernameBoxEdit, this.seeRobinVotedParams.UIUsernameBoxEditSendKeys, ModifierKeys.None);

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.seeRobinVotedParams.UIPasswordBoxEditSendKeys, true);

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(18, 26));

            // Click 'Onsite' button
            Mouse.Click(uIOnsiteButton, new Point(47, 36));

            // Click 'Back' button
            Mouse.Click(uIBackButton, new Point(15, 6));

            // Click 'Log Out' button
            Mouse.Click(uILogOutButton, new Point(15, 6));

            // Click 'UserGUI' title bar
            Mouse.Click(uIUserGUITitleBar, new Point(562, 5));
        }
        
        /// <summary>
        /// vote3 - Use 'vote3Params' to pass parameters into this method.
        /// </summary>
        public void vote3()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIReleaseWindow.UIItemWindow.UIEVotingSystemexeListItem.UINameEdit;
            WinEdit uIUsernameBoxEdit = this.UIItemWindow.UIUsernameBoxWindow.UIUsernameBoxEdit;
            WinEdit uIPasswordBoxEdit = this.UIItemWindow.UIPasswordBoxWindow.UIPasswordBoxEdit;
            WinCheckBox uIIamnotarobotCheckBox = this.UIIamnotarobotWindow.UIIamnotarobotCheckBox;
            WinButton uILoginButton = this.UILoginWindow.UILoginButton;
            WinButton uIContinueButton = this.UIContinueWindow.UIContinueButton;
            WinRadioButton uISamRadioButton = this.UIVotePanelWindow.UISamWindow.UISamRadioButton;
            WinButton uISubmitButton = this.UIVotePanelWindow.UISubmitWindow.UISubmitButton;
            WinButton uIYesButton = this.UIConfirmPanelWindow.UIYesWindow.UIYesButton;
            WinButton uIQuitButton = this.UIMicrosoftNETFrameworWindow.UIMicrosoftNETFrameworClient.UIQuitButton;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(52, 7));

            // Type 'Robin' in 'usernameBox' text box
            uIUsernameBoxEdit.Text = this.vote3Params.UIUsernameBoxEditText;

            // Type '{Tab}' in 'usernameBox' text box
            Keyboard.SendKeys(uIUsernameBoxEdit, this.vote3Params.UIUsernameBoxEditSendKeys, ModifierKeys.None);

            // Type '********' in 'passwordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.vote3Params.UIPasswordBoxEditSendKeys, true);

            // Select 'I am not a robot' check box
            uIIamnotarobotCheckBox.Checked = this.vote3Params.UIIamnotarobotCheckBoxChecked;

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(20, 29));

            // Click 'Continue' button
            Mouse.Click(uIContinueButton, new Point(30, 21));

            // Select 'Sam' radio button
            uISamRadioButton.Selected = this.vote3Params.UISamRadioButtonSelected;

            // Click 'Submit' button
            Mouse.Click(uISubmitButton, new Point(77, 36));

            // Click 'Yes' button
            Mouse.Click(uIYesButton, new Point(32, 25));

            // Click '&Quit' button
            Mouse.Click(uIQuitButton, new Point(34, 9));
        }
        
        #region Properties
        public virtual attemptLoginParams attemptLoginParams
        {
            get
            {
                if ((this.mattemptLoginParams == null))
                {
                    this.mattemptLoginParams = new attemptLoginParams();
                }
                return this.mattemptLoginParams;
            }
        }
        
        public virtual loginAsSuperParams loginAsSuperParams
        {
            get
            {
                if ((this.mloginAsSuperParams == null))
                {
                    this.mloginAsSuperParams = new loginAsSuperParams();
                }
                return this.mloginAsSuperParams;
            }
        }
        
        public virtual successLoginParams successLoginParams
        {
            get
            {
                if ((this.msuccessLoginParams == null))
                {
                    this.msuccessLoginParams = new successLoginParams();
                }
                return this.msuccessLoginParams;
            }
        }
        
        public virtual voteParams voteParams
        {
            get
            {
                if ((this.mvoteParams == null))
                {
                    this.mvoteParams = new voteParams();
                }
                return this.mvoteParams;
            }
        }
        
        public virtual seeIneligibleParams seeIneligibleParams
        {
            get
            {
                if ((this.mseeIneligibleParams == null))
                {
                    this.mseeIneligibleParams = new seeIneligibleParams();
                }
                return this.mseeIneligibleParams;
            }
        }
        
        public virtual setEligAndTryLogInParams setEligAndTryLogInParams
        {
            get
            {
                if ((this.msetEligAndTryLogInParams == null))
                {
                    this.msetEligAndTryLogInParams = new setEligAndTryLogInParams();
                }
                return this.msetEligAndTryLogInParams;
            }
        }
        
        public virtual voteAsSamParams voteAsSamParams
        {
            get
            {
                if ((this.mvoteAsSamParams == null))
                {
                    this.mvoteAsSamParams = new voteAsSamParams();
                }
                return this.mvoteAsSamParams;
            }
        }
        
        public virtual seeRobinVotedParams seeRobinVotedParams
        {
            get
            {
                if ((this.mseeRobinVotedParams == null))
                {
                    this.mseeRobinVotedParams = new seeRobinVotedParams();
                }
                return this.mseeRobinVotedParams;
            }
        }
        
        public virtual vote3Params vote3Params
        {
            get
            {
                if ((this.mvote3Params == null))
                {
                    this.mvote3Params = new vote3Params();
                }
                return this.mvote3Params;
            }
        }
        
        public UIReleaseWindow UIReleaseWindow
        {
            get
            {
                if ((this.mUIReleaseWindow == null))
                {
                    this.mUIReleaseWindow = new UIReleaseWindow();
                }
                return this.mUIReleaseWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIIamnotarobotWindow UIIamnotarobotWindow
        {
            get
            {
                if ((this.mUIIamnotarobotWindow == null))
                {
                    this.mUIIamnotarobotWindow = new UIIamnotarobotWindow();
                }
                return this.mUIIamnotarobotWindow;
            }
        }
        
        public UILoginWindow UILoginWindow
        {
            get
            {
                if ((this.mUILoginWindow == null))
                {
                    this.mUILoginWindow = new UILoginWindow();
                }
                return this.mUILoginWindow;
            }
        }
        
        public UIAdminGUIWindow UIAdminGUIWindow
        {
            get
            {
                if ((this.mUIAdminGUIWindow == null))
                {
                    this.mUIAdminGUIWindow = new UIAdminGUIWindow();
                }
                return this.mUIAdminGUIWindow;
            }
        }
        
        public UIContinueWindow UIContinueWindow
        {
            get
            {
                if ((this.mUIContinueWindow == null))
                {
                    this.mUIContinueWindow = new UIContinueWindow();
                }
                return this.mUIContinueWindow;
            }
        }
        
        public UIVotePanelWindow UIVotePanelWindow
        {
            get
            {
                if ((this.mUIVotePanelWindow == null))
                {
                    this.mUIVotePanelWindow = new UIVotePanelWindow();
                }
                return this.mUIVotePanelWindow;
            }
        }
        
        public UIConfirmPanelWindow UIConfirmPanelWindow
        {
            get
            {
                if ((this.mUIConfirmPanelWindow == null))
                {
                    this.mUIConfirmPanelWindow = new UIConfirmPanelWindow();
                }
                return this.mUIConfirmPanelWindow;
            }
        }
        
        public UIThankYouPanelWindow UIThankYouPanelWindow
        {
            get
            {
                if ((this.mUIThankYouPanelWindow == null))
                {
                    this.mUIThankYouPanelWindow = new UIThankYouPanelWindow();
                }
                return this.mUIThankYouPanelWindow;
            }
        }
        
        public UIMicrosoftNETFrameworWindow UIMicrosoftNETFrameworWindow
        {
            get
            {
                if ((this.mUIMicrosoftNETFrameworWindow == null))
                {
                    this.mUIMicrosoftNETFrameworWindow = new UIMicrosoftNETFrameworWindow();
                }
                return this.mUIMicrosoftNETFrameworWindow;
            }
        }
        #endregion
        
        #region Fields
        private attemptLoginParams mattemptLoginParams;
        
        private loginAsSuperParams mloginAsSuperParams;
        
        private successLoginParams msuccessLoginParams;
        
        private voteParams mvoteParams;
        
        private seeIneligibleParams mseeIneligibleParams;
        
        private setEligAndTryLogInParams msetEligAndTryLogInParams;
        
        private voteAsSamParams mvoteAsSamParams;
        
        private seeRobinVotedParams mseeRobinVotedParams;
        
        private vote3Params mvote3Params;
        
        private UIReleaseWindow mUIReleaseWindow;
        
        private UIItemWindow1 mUIItemWindow;
        
        private UIIamnotarobotWindow mUIIamnotarobotWindow;
        
        private UILoginWindow mUILoginWindow;
        
        private UIAdminGUIWindow mUIAdminGUIWindow;
        
        private UIContinueWindow mUIContinueWindow;
        
        private UIVotePanelWindow mUIVotePanelWindow;
        
        private UIConfirmPanelWindow mUIConfirmPanelWindow;
        
        private UIThankYouPanelWindow mUIThankYouPanelWindow;
        
        private UIMicrosoftNETFrameworWindow mUIMicrosoftNETFrameworWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'attemptLogin'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class attemptLoginParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Sam' in 'usernameBox' text box
        /// </summary>
        public string UIUsernameBoxEditText = "Sam";
        
        /// <summary>
        /// Type '{Tab}' in 'usernameBox' text box
        /// </summary>
        public string UIUsernameBoxEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "QWwOodIXpSM441BCNCWNvH9k+8fhegdI";
        
        /// <summary>
        /// Select 'I am not a robot' check box
        /// </summary>
        public bool UIIamnotarobotCheckBoxChecked = true;
        
        /// <summary>
        /// Type 'Alt + r' in 'Login' button
        /// </summary>
        public string UILoginButtonSendKeys = "r";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'loginAsSuper'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class loginAsSuperParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Super' in 'usernameBox' text box
        /// </summary>
        public string UIUsernameBoxEditText = "Super";
        
        /// <summary>
        /// Type '{Tab}' in 'usernameBox' text box
        /// </summary>
        public string UIUsernameBoxEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "QWwOodIXpSM441BCNCWNvH9k+8fhegdI";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'successLogin'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class successLoginParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Sam' in 'usernameBox' text box
        /// </summary>
        public string UIUsernameBoxEditText = "Sam";
        
        /// <summary>
        /// Type '{Tab}' in 'usernameBox' text box
        /// </summary>
        public string UIUsernameBoxEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "QWwOodIXpSM441BCNCWNvH9k+8fhegdI";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'vote'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class voteParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Robin' in 'usernameBox' text box
        /// </summary>
        public string UIUsernameBoxEditText = "Robin";
        
        /// <summary>
        /// Type '{Tab}' in 'usernameBox' text box
        /// </summary>
        public string UIUsernameBoxEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "QWwOodIXpSM441BCNCWNvH9k+8fhegdI";
        
        /// <summary>
        /// Select 'I am not a robot' check box
        /// </summary>
        public bool UIIamnotarobotCheckBoxChecked = true;
        
        /// <summary>
        /// Select 'Sam' radio button
        /// </summary>
        public bool UISamRadioButtonSelected = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'seeIneligible'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class seeIneligibleParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Robin' in 'usernameBox' text box
        /// </summary>
        public string UIUsernameBoxEditText = "Robin";
        
        /// <summary>
        /// Type '{Tab}' in 'usernameBox' text box
        /// </summary>
        public string UIUsernameBoxEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "QWwOodIXpSM441BCNCWNvH9k+8fhegdI";
        
        /// <summary>
        /// Type 'Super' in 'usernameBox' text box
        /// </summary>
        public string UIUsernameBoxEditText1 = "Super";
        
        /// <summary>
        /// Type '{Tab}' in 'usernameBox' text box
        /// </summary>
        public string UIUsernameBoxEditSendKeys1 = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys1 = "kBALykFX2ErWp6K4tWrnVtMM8ISUjzkJ8ZTcxhc3NAw=";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'setEligAndTryLogIn'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class setEligAndTryLogInParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Super' in 'usernameBox' text box
        /// </summary>
        public string UIUsernameBoxEditText = "Super";
        
        /// <summary>
        /// Type '{Tab}' in 'usernameBox' text box
        /// </summary>
        public string UIUsernameBoxEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "QWwOodIXpSM441BCNCWNvH9k+8fhegdI";
        
        /// <summary>
        /// Select 'I am not a robot' check box
        /// </summary>
        public bool UIIamnotarobotCheckBoxChecked = true;
        
        /// <summary>
        /// Type 'Robin' in 'usernameBox' text box
        /// </summary>
        public string UIUsernameBoxEditText1 = "Robin";
        
        /// <summary>
        /// Type '{Tab}' in 'usernameBox' text box
        /// </summary>
        public string UIUsernameBoxEditSendKeys1 = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys1 = "QWwOodIXpSM441BCNCWNvH9k+8fhegdI";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'voteAsSam'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class voteAsSamParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Robin' in 'usernameBox' text box
        /// </summary>
        public string UIUsernameBoxEditText = "Robin";
        
        /// <summary>
        /// Type '{Tab}' in 'usernameBox' text box
        /// </summary>
        public string UIUsernameBoxEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "QWwOodIXpSM441BCNCWNvH9k+8fhegdI";
        
        /// <summary>
        /// Select 'I am not a robot' check box
        /// </summary>
        public bool UIIamnotarobotCheckBoxChecked = true;
        
        /// <summary>
        /// Select 'Sam' radio button
        /// </summary>
        public bool UISamRadioButtonSelected = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'seeRobinVoted'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class seeRobinVotedParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Super' in 'usernameBox' text box
        /// </summary>
        public string UIUsernameBoxEditText = "Super";
        
        /// <summary>
        /// Type '{Tab}' in 'usernameBox' text box
        /// </summary>
        public string UIUsernameBoxEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "QWwOodIXpSM441BCNCWNvH9k+8fhegdI";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'vote3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class vote3Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Robin' in 'usernameBox' text box
        /// </summary>
        public string UIUsernameBoxEditText = "Robin";
        
        /// <summary>
        /// Type '{Tab}' in 'usernameBox' text box
        /// </summary>
        public string UIUsernameBoxEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'passwordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "QWwOodIXpSM441BCNCWNvH9k+8fhegdI";
        
        /// <summary>
        /// Select 'I am not a robot' check box
        /// </summary>
        public bool UIIamnotarobotCheckBoxChecked = true;
        
        /// <summary>
        /// Select 'Sam' radio button
        /// </summary>
        public bool UISamRadioButtonSelected = true;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIReleaseWindow : WinWindow
    {
        
        public UIReleaseWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Release";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("Release");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Release");
            #endregion
        }
        
        #region Properties
        public UIEVotingSystemexeListItem UIEVotingSystemexeListItem
        {
            get
            {
                if ((this.mUIEVotingSystemexeListItem == null))
                {
                    this.mUIEVotingSystemexeListItem = new UIEVotingSystemexeListItem(this);
                }
                return this.mUIEVotingSystemexeListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIEVotingSystemexeListItem mUIEVotingSystemexeListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEVotingSystemexeListItem : WinListItem
    {
        
        public UIEVotingSystemexeListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "EVotingSystem.exe";
            this.WindowTitles.Add("Release");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Release");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop 1";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIUsernameBoxWindow UIUsernameBoxWindow
        {
            get
            {
                if ((this.mUIUsernameBoxWindow == null))
                {
                    this.mUIUsernameBoxWindow = new UIUsernameBoxWindow(this);
                }
                return this.mUIUsernameBoxWindow;
            }
        }
        
        public UIPasswordBoxWindow UIPasswordBoxWindow
        {
            get
            {
                if ((this.mUIPasswordBoxWindow == null))
                {
                    this.mUIPasswordBoxWindow = new UIPasswordBoxWindow(this);
                }
                return this.mUIPasswordBoxWindow;
            }
        }
        
        public UILoginPanelWindow UILoginPanelWindow
        {
            get
            {
                if ((this.mUILoginPanelWindow == null))
                {
                    this.mUILoginPanelWindow = new UILoginPanelWindow(this);
                }
                return this.mUILoginPanelWindow;
            }
        }
        
        public UIUserGUIWindow UIUserGUIWindow
        {
            get
            {
                if ((this.mUIUserGUIWindow == null))
                {
                    this.mUIUserGUIWindow = new UIUserGUIWindow(this);
                }
                return this.mUIUserGUIWindow;
            }
        }
        
        public UILoginScreenWindow UILoginScreenWindow
        {
            get
            {
                if ((this.mUILoginScreenWindow == null))
                {
                    this.mUILoginScreenWindow = new UILoginScreenWindow(this);
                }
                return this.mUILoginScreenWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIUsernameBoxWindow mUIUsernameBoxWindow;
        
        private UIPasswordBoxWindow mUIPasswordBoxWindow;
        
        private UILoginPanelWindow mUILoginPanelWindow;
        
        private UIUserGUIWindow mUIUserGUIWindow;
        
        private UILoginScreenWindow mUILoginScreenWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUsernameBoxWindow : WinWindow
    {
        
        public UIUsernameBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "usernameBox";
            #endregion
        }
        
        #region Properties
        public WinEdit UIUsernameBoxEdit
        {
            get
            {
                if ((this.mUIUsernameBoxEdit == null))
                {
                    this.mUIUsernameBoxEdit = new WinEdit(this);
                }
                return this.mUIUsernameBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIUsernameBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPasswordBoxWindow : WinWindow
    {
        
        public UIPasswordBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "passwordBox";
            #endregion
        }
        
        #region Properties
        public WinEdit UIPasswordBoxEdit
        {
            get
            {
                if ((this.mUIPasswordBoxEdit == null))
                {
                    this.mUIPasswordBoxEdit = new WinEdit(this);
                }
                return this.mUIPasswordBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIPasswordBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILoginPanelWindow : WinWindow
    {
        
        public UILoginPanelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "loginPanel";
            #endregion
        }
        
        #region Properties
        public WinWindow UIUsernameBoxWindow
        {
            get
            {
                if ((this.mUIUsernameBoxWindow == null))
                {
                    this.mUIUsernameBoxWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIUsernameBoxWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    this.mUIUsernameBoxWindow.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUIUsernameBoxWindow;
            }
        }
        
        public WinClient UILoginPanelClient
        {
            get
            {
                if ((this.mUILoginPanelClient == null))
                {
                    this.mUILoginPanelClient = new WinClient(this);
                }
                return this.mUILoginPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIUsernameBoxWindow;
        
        private WinClient mUILoginPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUserGUIWindow : WinWindow
    {
        
        public UIUserGUIWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIUserGUITitleBar
        {
            get
            {
                if ((this.mUIUserGUITitleBar == null))
                {
                    this.mUIUserGUITitleBar = new WinTitleBar(this);
                }
                return this.mUIUserGUITitleBar;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIUserGUITitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILoginScreenWindow : WinWindow
    {
        
        public UILoginScreenWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WinTitleBar UILoginScreenTitleBar
        {
            get
            {
                if ((this.mUILoginScreenTitleBar == null))
                {
                    this.mUILoginScreenTitleBar = new WinTitleBar(this);
                }
                return this.mUILoginScreenTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUILoginScreenTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIIamnotarobotWindow : WinWindow
    {
        
        public UIIamnotarobotWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "I am not a robot";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("I am not a robot");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIIamnotarobotCheckBox
        {
            get
            {
                if ((this.mUIIamnotarobotCheckBox == null))
                {
                    this.mUIIamnotarobotCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIIamnotarobotCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "I am not a robot";
                    this.mUIIamnotarobotCheckBox.WindowTitles.Add("I am not a robot");
                    #endregion
                }
                return this.mUIIamnotarobotCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIIamnotarobotCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILoginWindow : WinWindow
    {
        
        public UILoginWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Login";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Login");
            #endregion
        }
        
        #region Properties
        public WinButton UILoginButton
        {
            get
            {
                if ((this.mUILoginButton == null))
                {
                    this.mUILoginButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILoginButton.SearchProperties[WinButton.PropertyNames.Name] = "Login";
                    this.mUILoginButton.WindowTitles.Add("Login");
                    #endregion
                }
                return this.mUILoginButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILoginButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAdminGUIWindow : WinWindow
    {
        
        public UIAdminGUIWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "AdminGUI";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("AdminGUI");
            #endregion
        }
        
        #region Properties
        public UIOnsiteWindow UIOnsiteWindow
        {
            get
            {
                if ((this.mUIOnsiteWindow == null))
                {
                    this.mUIOnsiteWindow = new UIOnsiteWindow(this);
                }
                return this.mUIOnsiteWindow;
            }
        }
        
        public UIVoterViewWindow UIVoterViewWindow
        {
            get
            {
                if ((this.mUIVoterViewWindow == null))
                {
                    this.mUIVoterViewWindow = new UIVoterViewWindow(this);
                }
                return this.mUIVoterViewWindow;
            }
        }
        
        public UIResetAuthattemptsWindow UIResetAuthattemptsWindow
        {
            get
            {
                if ((this.mUIResetAuthattemptsWindow == null))
                {
                    this.mUIResetAuthattemptsWindow = new UIResetAuthattemptsWindow(this);
                }
                return this.mUIResetAuthattemptsWindow;
            }
        }
        
        public UIBackWindow UIBackWindow
        {
            get
            {
                if ((this.mUIBackWindow == null))
                {
                    this.mUIBackWindow = new UIBackWindow(this);
                }
                return this.mUIBackWindow;
            }
        }
        
        public UILogOutWindow UILogOutWindow
        {
            get
            {
                if ((this.mUILogOutWindow == null))
                {
                    this.mUILogOutWindow = new UILogOutWindow(this);
                }
                return this.mUILogOutWindow;
            }
        }
        
        public UISetIneligibleWindow UISetIneligibleWindow
        {
            get
            {
                if ((this.mUISetIneligibleWindow == null))
                {
                    this.mUISetIneligibleWindow = new UISetIneligibleWindow(this);
                }
                return this.mUISetIneligibleWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOnsiteWindow mUIOnsiteWindow;
        
        private UIVoterViewWindow mUIVoterViewWindow;
        
        private UIResetAuthattemptsWindow mUIResetAuthattemptsWindow;
        
        private UIBackWindow mUIBackWindow;
        
        private UILogOutWindow mUILogOutWindow;
        
        private UISetIneligibleWindow mUISetIneligibleWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOnsiteWindow : WinWindow
    {
        
        public UIOnsiteWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "seeOnSiteBtn";
            this.WindowTitles.Add("AdminGUI");
            #endregion
        }
        
        #region Properties
        public WinButton UIOnsiteButton
        {
            get
            {
                if ((this.mUIOnsiteButton == null))
                {
                    this.mUIOnsiteButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOnsiteButton.SearchProperties[WinButton.PropertyNames.Name] = "Onsite";
                    this.mUIOnsiteButton.WindowTitles.Add("AdminGUI");
                    #endregion
                }
                return this.mUIOnsiteButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOnsiteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIVoterViewWindow : WinWindow
    {
        
        public UIVoterViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "voterView";
            this.WindowTitles.Add("AdminGUI");
            #endregion
        }
        
        #region Properties
        public UIDataGridViewTable UIDataGridViewTable
        {
            get
            {
                if ((this.mUIDataGridViewTable == null))
                {
                    this.mUIDataGridViewTable = new UIDataGridViewTable(this);
                }
                return this.mUIDataGridViewTable;
            }
        }
        #endregion
        
        #region Fields
        private UIDataGridViewTable mUIDataGridViewTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDataGridViewTable : WinTable
    {
        
        public UIDataGridViewTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            this.WindowTitles.Add("AdminGUI");
            #endregion
        }
        
        #region Properties
        public UIRow1Row UIRow1Row
        {
            get
            {
                if ((this.mUIRow1Row == null))
                {
                    this.mUIRow1Row = new UIRow1Row(this);
                }
                return this.mUIRow1Row;
            }
        }
        
        public UIRow0Row UIRow0Row
        {
            get
            {
                if ((this.mUIRow0Row == null))
                {
                    this.mUIRow0Row = new UIRow0Row(this);
                }
                return this.mUIRow0Row;
            }
        }
        #endregion
        
        #region Fields
        private UIRow1Row mUIRow1Row;
        
        private UIRow0Row mUIRow0Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRow1Row : WinRow
    {
        
        public UIRow1Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "Sam;True;True";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("AdminGUI");
            #endregion
        }
        
        #region Properties
        public WinCell UISamCell
        {
            get
            {
                if ((this.mUISamCell == null))
                {
                    this.mUISamCell = new WinCell(this);
                    #region Search Criteria
                    this.mUISamCell.SearchProperties[WinCell.PropertyNames.Value] = "Sam";
                    this.mUISamCell.WindowTitles.Add("AdminGUI");
                    #endregion
                }
                return this.mUISamCell;
            }
        }
        
        public WinCell UITrueCell
        {
            get
            {
                if ((this.mUITrueCell == null))
                {
                    this.mUITrueCell = new WinCell(this);
                    #region Search Criteria
                    this.mUITrueCell.SearchProperties[WinCell.PropertyNames.Value] = "True";
                    this.mUITrueCell.WindowTitles.Add("AdminGUI");
                    #endregion
                }
                return this.mUITrueCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUISamCell;
        
        private WinCell mUITrueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRow0Row : WinRow
    {
        
        public UIRow0Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "Robin;False;False";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("AdminGUI");
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    this.mUIFalseCell.WindowTitles.Add("AdminGUI");
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIResetAuthattemptsWindow : WinWindow
    {
        
        public UIResetAuthattemptsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "unlockBtn";
            this.WindowTitles.Add("AdminGUI");
            #endregion
        }
        
        #region Properties
        public WinButton UIResetAuthattemptsButton
        {
            get
            {
                if ((this.mUIResetAuthattemptsButton == null))
                {
                    this.mUIResetAuthattemptsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIResetAuthattemptsButton.SearchProperties[WinButton.PropertyNames.Name] = "Reset Auth attempts";
                    this.mUIResetAuthattemptsButton.WindowTitles.Add("AdminGUI");
                    #endregion
                }
                return this.mUIResetAuthattemptsButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIResetAuthattemptsButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIBackWindow : WinWindow
    {
        
        public UIBackWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "onSiteBack";
            this.WindowTitles.Add("AdminGUI");
            #endregion
        }
        
        #region Properties
        public WinButton UIBackButton
        {
            get
            {
                if ((this.mUIBackButton == null))
                {
                    this.mUIBackButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIBackButton.SearchProperties[WinButton.PropertyNames.Name] = "Back";
                    this.mUIBackButton.WindowTitles.Add("AdminGUI");
                    #endregion
                }
                return this.mUIBackButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIBackButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILogOutWindow : WinWindow
    {
        
        public UILogOutWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "logOutBtn";
            this.WindowTitles.Add("AdminGUI");
            #endregion
        }
        
        #region Properties
        public WinButton UILogOutButton
        {
            get
            {
                if ((this.mUILogOutButton == null))
                {
                    this.mUILogOutButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILogOutButton.SearchProperties[WinButton.PropertyNames.Name] = "Log Out";
                    this.mUILogOutButton.WindowTitles.Add("AdminGUI");
                    #endregion
                }
                return this.mUILogOutButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILogOutButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISetIneligibleWindow : WinWindow
    {
        
        public UISetIneligibleWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "setIneligibleBtn";
            this.WindowTitles.Add("AdminGUI");
            #endregion
        }
        
        #region Properties
        public WinButton UISetIneligibleButton
        {
            get
            {
                if ((this.mUISetIneligibleButton == null))
                {
                    this.mUISetIneligibleButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISetIneligibleButton.SearchProperties[WinButton.PropertyNames.Name] = "Set Ineligible";
                    this.mUISetIneligibleButton.WindowTitles.Add("AdminGUI");
                    #endregion
                }
                return this.mUISetIneligibleButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISetIneligibleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContinueWindow : WinWindow
    {
        
        public UIContinueWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Continue";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Continue");
            #endregion
        }
        
        #region Properties
        public WinButton UIContinueButton
        {
            get
            {
                if ((this.mUIContinueButton == null))
                {
                    this.mUIContinueButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContinueButton.SearchProperties[WinButton.PropertyNames.Name] = "Continue";
                    this.mUIContinueButton.WindowTitles.Add("Continue");
                    #endregion
                }
                return this.mUIContinueButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIContinueButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIVotePanelWindow : WinWindow
    {
        
        public UIVotePanelWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "To Vote:Select the check box displaying your desired candidate,Then select the \'S" +
                "ubmit\' button.";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UISamWindow UISamWindow
        {
            get
            {
                if ((this.mUISamWindow == null))
                {
                    this.mUISamWindow = new UISamWindow(this);
                }
                return this.mUISamWindow;
            }
        }
        
        public UISubmitWindow UISubmitWindow
        {
            get
            {
                if ((this.mUISubmitWindow == null))
                {
                    this.mUISubmitWindow = new UISubmitWindow(this);
                }
                return this.mUISubmitWindow;
            }
        }
        #endregion
        
        #region Fields
        private UISamWindow mUISamWindow;
        
        private UISubmitWindow mUISubmitWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISamWindow : WinWindow
    {
        
        public UISamWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "SamChk";
            #endregion
        }
        
        #region Properties
        public WinRadioButton UISamRadioButton
        {
            get
            {
                if ((this.mUISamRadioButton == null))
                {
                    this.mUISamRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUISamRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Sam";
                    #endregion
                }
                return this.mUISamRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUISamRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISubmitWindow : WinWindow
    {
        
        public UISubmitWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "submitBtn";
            #endregion
        }
        
        #region Properties
        public WinButton UISubmitButton
        {
            get
            {
                if ((this.mUISubmitButton == null))
                {
                    this.mUISubmitButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISubmitButton.SearchProperties[WinButton.PropertyNames.Name] = "Submit";
                    #endregion
                }
                return this.mUISubmitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISubmitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIConfirmPanelWindow : WinWindow
    {
        
        public UIConfirmPanelWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Select at least ONE candidate";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIYesWindow mUIYesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "confirmBtn";
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIThankYouPanelWindow : WinWindow
    {
        
        public UIThankYouPanelWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Sam: Green party.";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIEndSessionWindow UIEndSessionWindow
        {
            get
            {
                if ((this.mUIEndSessionWindow == null))
                {
                    this.mUIEndSessionWindow = new UIEndSessionWindow(this);
                }
                return this.mUIEndSessionWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIEndSessionWindow mUIEndSessionWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEndSessionWindow : WinWindow
    {
        
        public UIEndSessionWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "signOutLbl";
            #endregion
        }
        
        #region Properties
        public WinButton UIEndSessionButton
        {
            get
            {
                if ((this.mUIEndSessionButton == null))
                {
                    this.mUIEndSessionButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIEndSessionButton.SearchProperties[WinButton.PropertyNames.Name] = "End Session";
                    #endregion
                }
                return this.mUIEndSessionButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIEndSessionButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMicrosoftNETFrameworWindow : WinWindow
    {
        
        public UIMicrosoftNETFrameworWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Microsoft .NET Framework";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Microsoft .NET Framework");
            #endregion
        }
        
        #region Properties
        public UIMicrosoftNETFrameworClient UIMicrosoftNETFrameworClient
        {
            get
            {
                if ((this.mUIMicrosoftNETFrameworClient == null))
                {
                    this.mUIMicrosoftNETFrameworClient = new UIMicrosoftNETFrameworClient(this);
                }
                return this.mUIMicrosoftNETFrameworClient;
            }
        }
        #endregion
        
        #region Fields
        private UIMicrosoftNETFrameworClient mUIMicrosoftNETFrameworClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMicrosoftNETFrameworClient : WinClient
    {
        
        public UIMicrosoftNETFrameworClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Microsoft .NET Framework";
            this.WindowTitles.Add("Microsoft .NET Framework");
            #endregion
        }
        
        #region Properties
        public WinButton UIQuitButton
        {
            get
            {
                if ((this.mUIQuitButton == null))
                {
                    this.mUIQuitButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIQuitButton.SearchProperties[WinButton.PropertyNames.Name] = "Quit";
                    this.mUIQuitButton.WindowTitles.Add("Microsoft .NET Framework");
                    #endregion
                }
                return this.mUIQuitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIQuitButton;
        #endregion
    }
}
